    type instream = @PICKLER@.instream
    type outstream = @PICKLER@.outstream
  (* write an option *)
    fun writeOption wrFn (outS, NONE) = @PICKLER@.writeTag8(outS, 0w0)
      | writeOption wrFn (outS, SOME obj) = (
          @PICKLER@.writeTag8(outS, 0w1);
          wrFn(outS, obj))
  (* read an option *)
    fun readOption rdFn inS = (case @PICKLER@.readTag8 inS
           of 0w0 => NONE
            | 0w1 => let val obj = rdFn in SOME obj end
            | _ => raise ASDL.DecodeError
          (* end case *))
  (* write a list of values as a sequence *)
    fun writeSeq wrFn (outS, xs) = let
          fun write [] = ()
            | write (x::xr) = (wrFn(outS, x); write xr)
          in
            @PICKLER@.writeUInt(outS, Word.fromInt(length xs));
            write xs
          end
  (* read a sequence into a sequence of values *)
    fun readSeq rdFn inS = let
          val len = @PICKLER@.readUInt inS
          fun read (0w0, xs) = reverse (xs, [])
            | read (n, xs) = let
                val x = rdFn inS
                in
                  read (n-0w1, x::xs)
                end
          and reverse ([], xs) = xs
            | reverse (x::xr, xs) = reverse (xr, x::xs)
          in
            read (len, [])
          end
